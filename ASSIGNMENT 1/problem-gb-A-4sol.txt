-----------------------
A-4 Arrays and Pointers
-----------------------

        In this program we observe how GCC treats arrays and pointers.

        Compile  the following  program (file  A-4.c) and  observe the  compiler
        output to answer the questions.

        Source file : A-4.c
        Compilation : gcc-4.7.2 -c -fdump-tree-cfg A-4.c
        View result : vi -O A-4.c A-4.c.*.cfg
        Clear dumps : rm -f A-4.c.* A-4.o

Program
-------

        int main()
        {
            int a[3];
            int b[] = {1, 2, 3};
            int i, *p;
            for (i=0; i<3; i++) {
                a[i] = b[i];
            }
            p = a;
            *(p + 2) = 5;
        }


Questions
---------

        1   How is array declaration and initialization handled?

        2   Why does the statement a[i] = b[i] get broken down to two steps with
            an intermediate temporary?

        3   Why are there CLOBBER statements at the end?





answer:
1.Array decleration is normal as we do in programme but initialization is differ because innormal we directly write in curly braces bt here in gimple initialization is on seperate line by using index.
2.They use temporary intermediate to get to know the whole process i.e. if we directly apply a[0]=b[0] then we cant able to which value of b is assign to a so to simplify this we use temporary intermediate.
3.CLOBBER means that a,b no longer has value because it gone out of scope i.e. to decleare end.